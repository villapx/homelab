- name: Ensure dependencies are installed
  become: true
  ansible.builtin.package:
    name:
      - open-iscsi  # required for Longhorn to be able to provide persistent volumes to Kubernetes
      - nfs-common  # required for RWX support in Longhorn
    state: present

- name: Enable iscsi_tcp kernel module
  become: true
  community.general.modprobe:
    name: iscsi_tcp
    persistent: present

- name: Check current k3s version
  block:
    - name: Check if k3s is installed
      ansible.builtin.stat:
        path: "{{ k3s_bin_path }}"
      changed_when: false
      register: k3s_binary

    - name: Check k3s version
      when: k3s_binary.stat.exists
      ansible.builtin.shell:
        cmd: "{{ k3s_bin_path }} --version"
      changed_when: false
      register: installed_k3s_version

- name: Install or upgrade k3s
  when: >-
    ( not k3s_binary.stat.exists )
    or ( k3s_version not in installed_k3s_version.stdout )
    or ( force_k3s_install is defined )
  block:
    - name: Download k3s installer
      ansible.builtin.get_url:
        url: "https://get.k3s.io"
        dest: "/tmp/k3s-install.sh"
        mode: '755'
      register: k3s_installer_script

    - name: Build environment variables for k3s installer
      ansible.builtin.set_fact:
        k3s_env_var_assignments: >-
          {%- for var_assignment in k3s_installer_vars -%}
          {%- for key, value in var_assignment.items() -%}
          {{ key }}="{{ value }}"
          {% endfor -%}
          {%- endfor -%}

    - name: Run k3s installer
      become: true
      ansible.builtin.shell:
        cmd: >
          {{ k3s_env_var_assignments }}
          INSTALL_K3S_VERSION="{{ k3s_version }}"
          {{ k3s_installer_script.dest }}
          --token "{{ secrets.k3s.token }}"
          {{ k3s_cmd_line_args | join(" ") }}

- name: Remove swap
  block:
    - name: Check if swap is configured
      changed_when: false
      register: swap_configured
      ignore_errors: true
      ansible.builtin.shell:
        cmd: grep --extended-regexp '^([^[:blank:]]+[[:blank:]]+){2}swap' /etc/fstab

    - name: swapoff
      become: true
      when: swap_configured.rc == 0
      ansible.builtin.shell:
        cmd: swapoff --all

    - name: Remove swap from /etc/fstab
      become: true
      when: swap_configured.rc == 0
      ansible.builtin.shell:
        cmd: sed --in-place --regexp-extended '/^([^[:blank:]]+[[:blank:]]+){2}swap/d' /etc/fstab
